worker_processes <%= @worker_processes %>

working_directory '<%= @working_directory %>'

listen '<%= @listen_socket %>', :backlog => 64
listen '<%= @listen_port %>', :tcp_nopush => false

timeout <%= @worker_timeout %>

pid '<%= @upstart_pid %>'

stderr_path '<%= @stderr_path %>'
stdout_path '<%= @stdout_path %>'

preload_app <%= @preload_app %>

GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

check_client_connection true

before_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  defined?(Sequel::Model) and
    Sequel::DATABASES.each{ |db| db.disconnect }

  # old_pid = "#{server.config[:pid]}.oldbin"
  # if old_pid != server.pid
  #   begin
  #     sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
  #     Process.kill(sig, File.read(old_pid).to_i)
  #   rescue Errno::ENOENT, Errno::ESRCH
  #   end
  # end

  # sleep 1
end

after_fork do |server, worker|
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.establish_connection
end

<% if @enable_stats -%>
# https://newrelic.com/docs/ruby/ruby-gc-instrumentation
if GC.respond_to?(:enable_stats)
  GC.enable_stats
end
if defined?(GC::Profiler) and GC::Profiler.respond_to?(:enable)
  GC::Profiler.enable
end
<% end -%>
